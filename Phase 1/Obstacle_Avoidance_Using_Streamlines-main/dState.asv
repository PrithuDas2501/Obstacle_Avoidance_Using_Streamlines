function y = dState(t, X, model, pp, A, c)


persistent CollisionFlag streamVal Non_Transformed_Plane_AOA Aye Bye Zdash Xdashdash Ydashdash qx qy qz;
if isempty(CollisionFlag)
    CollisionFlag = 0;
    streamVal = 0;
end


Distance = norm(c-X(1:3));
if Distance < 5
    options = optimoptions('fmincon', 'Display', 'off');
    [lambda,fval] = fmincon(@(lambda) CheckCollosion(lambda, A, c, [X(1);X(2);X(3)], [X(4);X(5);X(6)]),0, [], [],[],[],[],[],[],options);
    
    if fval<0.75 && CollisionFlag == 0
        CollisionFlag = 1;
        DesiredSlope1 = atand(-X(4)/max(0.01,X(5)));
        VOL = [cosd(DesiredSlope1); sind(DesiredSlope1); 0];
        VOR = -VOL;
        DesiredSlope2 = atand(-X(5)/max(0.01,X(6)));
        VOV = [0; -cosd(DesiredSlope2); -sind(DesiredSlope2)];
        VOV = cross()
    
        Zdash = VOV;
        plane = [Zdash' 0];
        for q = 1:4
            if abs(plane(q))<0.001
                plane(q) = 0.001;
            end
        end
        
        [Aye,Bye,qx,qy,qz]=intersection_elipsoid_plane2([A(1,1) A(2,2) A(3,3) (A(2,1)+A(1,2))/2 (A(3,1)+A(1,3))/2 (A(2,3)+A(3,2))/2 0 0 0 -1], plane);
        Xdash = c + [qx; qy; qz]-[X(1);X(2);X(3)];
        VelVec = [X(4);X(5);X(6)]/max(0.001,norm([X(4);X(5);X(6)]));
        Xdash = Xdash/norm(Xdash);
        Zdash = Zdash/norm(Zdash);
        Ydash = cross(Zdash,VelVec);
        
        AOA1 = fmincon(@(theta) FindAOA(theta, Aye, [qx;qy;qz], Xdash, Zdash, A),0.1, [1;-1], [pi/2;pi/2],[],[],[],[],[],options);
        Rotation_Matrix = RotMatrix(AOA1, Zdash);
        Xdashdash = Rotation_Matrix*Xdash;
        Ydashdash = Rotation_Matrix*Ydash;
    
        
        AOA = acos(dot(VelVec, Xdashdash))*sign(AOA1);
        Non_Transformed_Plane_AOA = atan((Aye/Bye)*tan(AOA));
        streamVal = find_stream(norm(X(1:3)-[qx;qy;qz]),Non_Transformed_Plane_AOA,AOA1,Aye,Bye);
    end
else
    if CollisionFlag==1
        CollisionFlag=0;
    end
end

Traj = ppval(pp,t);
if CollisionFlag==1
    %% Insert alternate Traj
    Traj = alternateTraj(Traj,streamVal,Non_Transformed_Plane_AOA,Aye,Bye,Zdash,Xdashdash,Ydashdash, c+[qx; qy; qz]);
end


u = model.control;
en = environment(model);

s = zeros(13,1);
s(1:12) = X(1:end-1);

u.Thrust = model.Configuration.Mass*en.Gravity/(cos(s(8))*(cos(s(9))));
u.Thrust = u.Thrust + 1*(Traj(3)+X(3)) + 1*(0+X(6));
u.Pitch = u.Pitch - 0.1*(Traj(1)-X(1)) - 0.2*(0-X(4));
u.Roll = u.Roll + 0.1*(Traj(2)-X(2)) + 0.2*(0-X(5));

if u.Thrust>4*model.Configuration.Mass*en.Gravity
    u.Thrust = 4*model.Configuration.Mass*en.Gravity;
end
if u.Pitch > pi/4
    u.Pitch = pi/4;
elseif u.Pitch < -pi/4
    u.Pitch = -pi/4;
end
if u.Roll > pi/4
    u.Roll = pi/4;
elseif u.Roll < -pi/4
    u.Roll = -pi/4;
end

s(end) = u.Thrust;
y = derivative(model,s,u,en);

end